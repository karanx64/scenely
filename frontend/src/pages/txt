(
    <div className="card w-full bg-base-100 shadow-md">
      <div
        className="relative aspect-square bg-black overflow-visible"
        onTouchStart={(e) => (startX = e.touches[0].clientX)}
        onTouchEnd={handleSwipe}
      >
        {images.map((img, i) => (
          <img
            key={i}
            src={img}
            alt={`Post ${i}`}
            className={`absolute inset-0 h-full w-full object-contain transition-opacity duration-300 ${
              i === index ? "opacity-100 z-10" : "opacity-0 z-0"
            }`}
          />
        ))}
      </div>

      <div className="card-body p-4">
        {images.length > 1 && (
          <div className="flex justify-center gap-4 mb-2">
            <button onClick={prev} className="btn btn-sm btn-outline">
              <ChevronLeft size={16} /> Prev
            </button>
            <button onClick={next} className="btn btn-sm btn-outline">
              Next <ChevronRight size={16} />
            </button>
          </div>
        )}

        {post.media?.title && (
          <p className="text-sm text-base-content/60">
            üìΩÔ∏è {post.media.title} ({post.media.type})
          </p>
        )}

        {post.caption && <p>{post.caption}</p>}
        {post.emoji && <p className="text-2xl">{post.emoji}</p>}

        <div className="flex justify-between items-center text-sm mt-2">
          <button
            onClick={handleLike}
            className={`text-error hover:underline ${
              likeLoading ? "opacity-50 cursor-not-allowed" : ""
            }`}
            disabled={likeLoading} // Disable button while loading
          >
            ‚ù§Ô∏è Like ({likesCount})
          </button>
          <span className="text-base-content/60">{viewsCount} views</span>
        </div>

        {currentUserId === post.userId._id && (
          <button
            className="btn btn-error btn-sm mt-2"
            onClick={() => setShowDeleteModal(true)}
          >
            Delete Post
          </button>
        )}

        <div className="flex gap-4 mt-2">
          <button
            onClick={() => setShowShareModal(true)}
            className="btn btn-outline btn-primary btn-sm"
          >
            Share
          </button>
        </div>

        {showShareModal && (
          <SharePostModal
            postId={post._id}
            onClose={() => setShowShareModal(false)}
          />
        )}

        {showDeleteModal && (
          <Modal
            title="Confirm Deletion"
            description="Are you sure you want to delete this post? This cannot be undone."
            type="confirm"
            onConfirm={handleDelete}
            onClose={() => setShowDeleteModal(false)}
          >
            {deleting && <Loader type="spinner" size="sm" />}
          </Modal>
        )}
      </div>
    </div>
  );